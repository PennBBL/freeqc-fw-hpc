#!/bin/bash
FLYWHEEL_BASE=/flywheel/v0
MANIFEST_FILE=$FLYWHEEL_BASE/manifest.json
CONFIG_FILE=$FLYWHEEL_BASE/config.json
ANALYSIS_ID=$(jq -r '.destination.id' $CONFIG_FILE)
INPUT_DIR=$FLYWHEEL_BASE/input
GEAR_OUTPUT_DIR=$FLYWHEEL_BASE/output
FQC_OUTPUT_DIR=$GEAR_OUTPUT_DIR/"$ANALYSIS_ID"
WORKING_DIR=$GEAR_OUTPUT_DIR/"$ANALYSIS_ID"_work
#BIDS_DIR=$GEAR_OUTPUT_DIR/bids_dataset
#EXE_SCRIPT=$GEAR_OUTPUT_DIR/fqc_run.sh
CONTAINER='[flywheel/freesurfer-quality-calc]'

# CRITICAL: re-create the environment
cat ${FLYWHEEL_BASE}/docker-env.sh
source ${FLYWHEEL_BASE}/docker-env.sh

function parse_config {

  CONFIG_FILE=$FLYWHEEL_BASE/config.json
  MANIFEST_FILE=$FLYWHEEL_BASE/manifest.json

  if [[ -f $CONFIG_FILE ]]; then
    echo "$(cat $CONFIG_FILE | jq -r '.config.'$1)"
  else
    CONFIG_FILE=$MANIFEST_FILE
    echo "$(cat $MANIFEST_FILE | jq -r '.config.'$1'.default')"
  fi
}

config_save_outputs="$(parse_config 'save_partial_outputs')"

echo -e "$CONTAINER BEGIN FQC DOCKERFILE\n"
cat ${FLYWHEEL_BASE}/*Dockerfile
echo -e "$CONTAINER END FQC DOCKERFILE \n"


#############################################################
##################### PROCESSING STEPS #####################
#############################################################

####### fMRIPrep outputs that pass QA #######
# QA: Prior manual + Euler-based inspection for unchecked images
# bblid,seslabel,cnr_graycsf_lh,cnr_graycsf_rh,cnr_graywhite_lh,cnr_graywhite_rh,euler_lh,euler_rh
InDir=${INPUT_DIR}/freesurfer
#~/Documents/flywheel/antssstbids_fw_debug/5ea767e021d44102f5600847/freesurfer
OutDir=${OUTPUT_DIR}/data
#~/Documents/flywheel/freesurfer-quality-calc_fw_debug/output/data
mkdir ${OutDir}
subj=`ls -d ${InDir}/sub* | sed 's#.*/##'`
bblid=`echo ${subj} | cut -d "-" -f 2`
seslabel=#### NEED TO FIGURE THIS OUT ####
surfDir=${InDir}/${subj}/surf ### MIGHT HAVE TO GIT RID OF DIRS BETWEEN INPUT AND FREESURFER
mriDir=${InDir}/${subj}/mri

# ----- CNR ----- #
mri_cnr ${surfDir} ${mriDir}/orig.mgz > ${OutDir}/cnr.txt
total=`grep "total CNR" ${OutDir}/cnr.txt | cut -f 4 -d " "`
cnr=`grep "gray/white CNR" ${OutDir}/cnr.txt`
cnr_graycsf_lh=`echo $cnr | cut -d "," -f 2 | cut -d "=" -f 2 | cut -d " " -f 2`
cnr_graycsf_rh=`echo $cnr | cut -d "," -f 3 | cut -d "=" -f 2 | cut -d " " -f 2`
cnr_graywhite_lh=`echo $cnr | cut -d "," -f 1 | cut -d "=" -f 2 | cut -d " " -f 2`
cnr_graywhite_rh=`echo $cnr | cut -d "," -f 2 | cut -d "=" -f 3 | cut -d " " -f 2`

# ---- Euler ---- #
mris_euler_number -o ${OutDir}/euler_lh.txt ${surfDir}/lh.orig.nofix
euler_holes_lh=`grep " " ${OutDir}/euler_lh.txt | sed -e 's/^[[:space:]]*//'`
mris_euler_number -o ${OutDir}/euler_rh.txt ${surfDir}/rh.orig.nofix
euler_holes_rh=`grep " " ${OutDir}/euler_rh.txt | sed -e 's/^[[:space:]]*//'`
euler_holes_total=$(( ${euler_lh} + ${euler_rh} ))

# ----- CSV ----- #
echo "bblid,seslabel,cnr_graycsf_lh,cnr_graycsf_rh,cnr_graywhite_lh,cnr_graywhite_rh,euler_holes_lh,euler_holes_rh,euler_holes_total" > ${OutDir}/quality.csv
echo "${bblid},${seslabel},${cnr_graycsf_lh},${cnr_graycsf_rh},${cnr_graywhite_lh},${cnr_graywhite_rh},${euler_holes_lh},${euler_holes_rh},${euler_holes_total}" >> ${OutDir}/quality.csv

# Remove unnecessary files
rm ${OutDir}/cnr.txt
rm ${OutDir}/euler_lh.txt
rm ${OutDir}/euler_rh.txt

#############################################################
#############################################################
#############################################################

if [[ $FQC_EXITSTATUS == 0 ]] ; then ### Some other check of outputs

  # Generate zipped output of fqc
  cd "$GEAR_OUTPUT_DIR"
  echo "$CONTAINER  generating zip archive from outputs..."
  time zip -q -r "$GEAR_OUTPUT_DIR"/fqc_"$SUB_ID"_"$ANALYSIS_ID" $(basename "$FQC_OUTPUT_DIR")

  chmod -R 777 $GEAR_OUTPUT_DIR

elif [[ $config_save_outputs == 'true' ]] ; then
  echo "$CONTAINER  Error occurred. Config 'save_outputs' set to true. Zipping up outputs."
  cd "$GEAR_OUTPUT_DIR"
  time zip -q -r "$GEAR_OUTPUT_DIR"/debug_fqc_"$ANALYSIS_ID"  $(basename "$FQC_OUTPUT_DIR")
  time zip -q -r "$GEAR_OUTPUT_DIR"/debug_fqc_work_"$ANALYSIS_ID" $(basename "$WORKING_DIR")
  chmod -R 777 $GEAR_OUTPUT_DIR

  # COPY ANALYSIS TO PROJECT LEVEL IF MULTI-SESSION. Q: Why project level? And not subject?
  #   Use Python SDK to accomplish this task

  /usr/local/miniconda/bin/python ${FLYWHEEL_BASE}/move_to_project.py
  if [[ $? != 0 ]]; then
    echo "$CONTAINER  Problem resolving multi-session structure! Exiting (1)"
    exit 1
  fi

else
  echo "$CONTAINER  Errors encountered during execution. Save outputs config not set. Cleaning up and exiting."
fi

# Clean up
rm -rf "$WORKING_DIR"
rm -rf "$FQC_OUTPUT_DIR"

echo -e "Wrote: `ls -lh $GEAR_OUTPUT_DIR`"

exit $FQC_EXITSTATUS
